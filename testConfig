configuration TestConfig
{
    Import-DscResource -ModuleName PSDesiredStateConfiguration
    Import-DscResource -module xDSCDomainjoin
    Import-DscResource -ModuleName cChoco
    
    $svcTeamCityAgent = Get-AutomationPSCredential -Name 'svcTeamCityAgent'
    $storageCredential = Get-AutomationPSCredential -Name 'storageCredential'
    $domainCredentials = Get-AutomationPSCredential -Name 'domainCreds'
    $domainName = Get-AutomationVariable -Name 'domainName'
    
    Node WebServer
    {
        WindowsFeature IIS
        {
            Ensure               = 'Present'
            Name                 = 'Web-Server'
            IncludeAllSubFeature = $true

        }
    }

    Node NotWebServer
    {
        WindowsFeature IIS
        {
            Ensure               = 'Absent'
            Name                 = 'Web-Server'

        }
    }
    
    Node TeamCityAgent
    {
        WindowsFeature IIS
        {
            Ensure               = 'Absent'
            Name                 = 'Web-Server'

        }
        
        Service TeamCityBuildAgent
        {   
            DisplayName           = 'TeamCity Build Agent'
            Name                  = 'TCBuildAgent'
            StartupType           = 'Automatic'
            State                 = 'Running'
            Credential            = $svcTeamCityAgent
        }
    }
    
        Node TeamCityAgentFull
    {
        xDSCDomainjoin JoinDomain
        {
            Domain = $domainName
            Credential = $domainCredentials
            JoinOU = "OU=TCA,OU=allPrivate,OU=allServers,OU=allMachines,DC=cloud,DC=rockend,DC=io"
        }

        cChocoInstaller installChoco
        {
            InstallDir = "c:\software\choco"
        }

        cChocoPackageInstaller installChrome
        {
            Name        = "googlechrome"
            DependsOn   = "[cChocoInstaller]installChoco"
        }

        cChocoPackageInstaller installGit
        {
            Ensure = 'Present'
            Name = "git"
            #Params = ""
        }

        File MSBuildTools14
        {
            DestinationPath = "c:\software\Microsoft\Build Tools\BuildTools_Full.exe"
            Credential = $storageCredential
            Ensure = "Present"
            SourcePath = "\\prodrockcoresoftware.file.core.windows.net\software\Software\Microsoft\Microsoft Build Tools 2015\BuildTools_Full.exe"
            Type = "File"
            Recurse = $false
        }
        
        Package installMSBuildTools14
        {
            Ensure              = "Present"
            Path                = "c:\software\Microsoft\Build Tools\BuildTools_Full.exe"
            Name                = "Microsoft Build Tools 14.0 (amd64)"
            ProductId           = "8C918E5B-E238-401F-9F6E-4FB84B024CA2"
            Arguments           = "/q"
        }
        cChocoPackageInstaller installMSBuildTools12
        {
            Ensure = 'Present'
            Name = "microsoft-build-tools"
            Version = "12.0.21005.1"
        }

        cChocoPackageInstaller NodeJS
        {
            Ensure = 'Present'
            Name = "nodejs.install"
            #Params = ""
        }

        cChocoPackageInstaller Redis
        {
            Ensure = 'Present'
            Name = "redis-64"
            #Params = ""
        }

        File AzureBuildTools
        {
            DestinationPath = "c:\software\Microsoft\Azure Build Tools"
            Credential = $storageCredential
            Ensure = "Present"
            SourcePath = "\\prodrockcoresoftware.file.core.windows.net\software\Software\Microsoft\Azure Build Tools"
            Type = "Directory"
            Recurse = $true
        }
        
        cChocoPackageInstaller SQLServerLocalDB
        {
            Ensure = 'Present'
            Name = "sqlserverlocaldb"
            ChocoParams = "--allowemptychecksum"
            #Params = ""
        }
        
        cChocoPackageInstaller AzureStorageEmulator
        {
            Ensure = 'Present'
            Name = "azurestorageemulator"
            #Params = ""
            DependsOn = "[cChocoPackageInstaller]SQLServerLocalDB"
        }

        Package AzureLibsForNet
        {
            Ensure              = "Present"
            Path                = "c:\software\Microsoft\Azure Build Tools\WindowsAzureLibsForNet-x64.msi"
            Name                = "Windows Azure Libraries for .NET â€“ v2.3"
            ProductId           = "C0591F2A-45AD-4189-86A7-C2B1DF3D148D"
        }

        Package AzureAuthoringTools
        {
            Ensure              = "Present"
            Path                = "c:\software\Microsoft\Azure Build Tools\WindowsAzureAuthoringTools-x64.msi"
            Name                = "Windows Azure Authoring Tools - v2.3"
            ProductId           = "CA53F7A1-A71D-4C7F-ABD2-7BDD26FE0D74"
            DependsOn           = "[Package]AzureLibsForNet"
        }

        Package WindowsAzureTools
        {
            Ensure              = "Present"
            Path                = "c:\software\Microsoft\Azure Build Tools\WindowsAzureTools.vs120.exe"
            Name                = "Windows Azure Tools for Microsoft Visual Studio 2013 - v2.3"
            ProductId           = "E055B52B-39C5-4AA9-BD7C-05CC5D1774B7"
            Arguments           = "/q"
            DependsOn           = "[Package]AzureAuthoringTools"
        }
        
        cChocoPackageInstaller TeamCityAgent
        {
            Ensure = 'Present'
            Name = "teamcityagent"
            ChocoParams = "--allowemptychecksum"
            Params = "serverUrl=http://teamcity.cloud.rockend.io"
        }
        
        Environment Git-nodejs
        {
            Ensure = "Present"
            Name = "Path"
            Path = $true
            Value = "C:\Program Files\Git\cmd;C:\Program Files\nodejs\"
        }
        
        # Delete service created by Chocolatey TeamCityAgent package
        Service ChocolateyTeamCityBuildAgent
        {   
            DisplayName           = "TeamCity Build Agent $env:COMPUTERNAME"
            Name                  = $env:COMPUTERNAME
            StartupType           = 'Automatic'
            State                 = 'Running'
            Ensure                = "Absent"
            Credential            = $svcTeamCityAgent
            DependsOn             = "[cChocoPackageInstaller]TeamCityAgent"
        }
        
        Service TeamCityBuildAgent
        {   
            DisplayName           = 'TeamCity Build Agent'
            Name                  = 'TCBuildAgent'
            StartupType           = 'Automatic'
            State                 = 'Running'
            Credential            = $svcTeamCityAgent
            Path                  = 'C:\buildAgent\launcher\bin\TeamCityAgentService-windows-x86-32.exe -s C:\buildAgent\launcher\conf\wrapper.conf'
            DependsOn             = "[Service]ChocolateyTeamCityBuildAgent"
        }
        
        File AzureStorageEmulatorScheduledTask
        {
            DestinationPath = "C:\software\Microsoft\Azure Storage Emulator.xml"
            Credential = $storageCredential
            Ensure = "present"
            SourcePath = "\\prodrockcoresoftware.file.core.windows.net\software\Software\Microsoft\Azure Storage Emulator\Azure Storage Emulator.xml"
            Type = "File"
            Recurse = $false
        }
        
        Script AzureStorageEmulator
        {
          GetScript = { 
            # Do Nothing
          }
          TestScript = { 
            return !($task = (Get-ScheduledTask -TaskName "Azure Storage Emulator" -ErrorAction SilentlyContinue) -eq $null) 
          }
          SetScript = { 
            schtasks.exe /create /xml "C:\software\Microsoft\Azure Storage Emulator.xml" /tn "Azure Storage Emulator" /ru "SYSTEM" 
            shutdown -r -f -t 10
          }
          DependsOn = "[File]AzureStorageEmulatorScheduledTask"
        }
        
        WindowsFeature IIS
        {
            Ensure               = 'Absent'
            Name                 = 'Web-Server'
        }
    }

}
